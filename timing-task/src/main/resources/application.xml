<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="    
           http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
           http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "> 
     
    <!-- <import resource="springmvc/spring-mvc.xml" /> -->
    <import resource="quartz/spring-quartz.xml" />
       
    <!-- 自动扫描注解的bean -->  
    <context:component-scan base-package="com.bsoft.service" /> 
    <context:component-scan base-package="com.bsoft.quartz" />
    
    <!-- 引入jdbc配置文件 -->    
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
               <value>classpath:db.properties</value>  
               <value>classpath:log4j.properties</value>  
                <!--要是有多个配置文件，只需在这里继续添加即可 -->  
            </list> 
        </property> 
    </bean>  
    
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.jdbcUrl}" />
		<property name="user" value="${db.user}" />
		<property name="password" value="${db.password}" />
		<property name="minPoolSize" value="${db.pool.minPoolSize}" />
		<property name="maxPoolSize" value="${db.pool.maxPoolSize}" />
		<property name="initialPoolSize" value="${db.pool.initialPoolSize}" />
		<property name="idleConnectionTestPeriod" value="${db.pool.idleConnectionTestPeriod}" />
		<property name="maxIdleTime" value="${db.pool.maxIdleTime}" />
	</bean>
  
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="mapperLocations" value="classpath*:com/bsoft/mappers/*.xml"/>    
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />  
        <!-- <property name="typeAliasesPackage" value="com.tiantian.ckeditor.model" /> -->  
    </bean>  
    
    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.bsoft.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>  
    
    <!-- 编程式事务 -->
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean> -->
    
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="do*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="create*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" 
           				rollback-for="java.lang.Exception" /> 
        </tx:attributes>
    </tx:advice>
    
    <!-- 3. 配置事务切入点, 再把事务属性和事务切入点关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.bsoft.service.*.*(..))" id="txPointcut"/>
		<!--第一个点表示类名，第二个点表示方法名，后面括号表示参数个数和类型随意 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
		<!-- 关联起来，在调用service时启动事务(事务为切面，service的方法为切点) -->
	</aop:config>
    
</beans>  